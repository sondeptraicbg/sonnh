/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/auth/register": {
    post: operations["register"];
  };
  "/api/v1/auth/authenticate": {
    post: operations["authenticate"];
  };
  "/api/v1/admin/tag/save": {
    post: operations["savePost"];
  };
  "/api/v1/admin/post/save": {
    post: operations["savePost_1"];
  };
  "/api/v1/admin/post/delete/{postId}": {
    post: operations["deletePost"];
  };
  "/api/v1/reader/tag/id/{tagId}": {
    get: operations["findById"];
  };
  "/api/v1/reader/tag/all": {
    get: operations["findPostsByTagName"];
  };
  "/api/v1/reader/post/{tagName}": {
    get: operations["findPostsByTagName_1"];
  };
  "/api/v1/reader/post/id/{postId}": {
    get: operations["findPostsById"];
  };
  "/api/v1/reader/post/category/{categoryId}": {
    get: operations["findPostsByCategory"];
  };
  "/api/v1/reader/category/id/{categoryId}": {
    get: operations["findById_1"];
  };
  "/api/v1/reader/category/all": {
    get: operations["findCategories"];
  };
  "/api/v1/admin/post/tagname/{tagName}": {
    get: operations["findPostsByTagName_2"];
  };
  "/api/v1/admin/post/id/{postId}": {
    get: operations["findPostsById_1"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    RegisterRequest: {
      username?: string;
      password?: string;
      name?: string;
      /** @enum {string} */
      role?: "ADMIN";
    };
    AuthenticationResponse: {
      token?: string;
      /** @enum {string} */
      role?: "ADMIN";
    };
    AuthenticationRequest: {
      email?: string;
      password?: string;
    };
    TagDAO: {
      tagName?: string;
    };
    Tag: {
      /** Format: int32 */
      id?: number;
      tagName?: string;
    };
    PostDAO: {
      title?: string;
      content?: string;
      /** Format: int32 */
      priority?: number;
      createTime?: string;
      listTag?: number[];
      /** Format: int32 */
      postCategory?: number;
    };
    Post: {
      /** Format: int32 */
      id?: number;
      title?: string;
      content?: string;
      /** Format: int32 */
      priority?: number;
      createTime?: string;
      listTag?: components["schemas"]["Tag"][];
    };
    PostCategory: {
      /** Format: int32 */
      id?: number;
      categoryName?: string;
      posts?: components["schemas"]["Post"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AuthenticationResponse"];
        };
      };
    };
  };
  authenticate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthenticationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AuthenticationResponse"];
        };
      };
    };
  };
  savePost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagDAO"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Tag"];
        };
      };
    };
  };
  savePost_1: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostDAO"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Post"];
        };
      };
    };
  };
  deletePost: {
    parameters: {
      path: {
        postId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
    };
  };
  findById: {
    parameters: {
      path: {
        tagId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Tag"];
        };
      };
    };
  };
  findPostsByTagName: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Tag"][];
        };
      };
    };
  };
  findPostsByTagName_1: {
    parameters: {
      path: {
        tagName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Post"][];
        };
      };
    };
  };
  findPostsById: {
    parameters: {
      path: {
        postId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Post"];
        };
      };
    };
  };
  findPostsByCategory: {
    parameters: {
      path: {
        categoryId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Post"][];
        };
      };
    };
  };
  findById_1: {
    parameters: {
      path: {
        categoryId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PostCategory"];
        };
      };
    };
  };
  findCategories: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PostCategory"][];
        };
      };
    };
  };
  findPostsByTagName_2: {
    parameters: {
      path: {
        tagName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Post"][];
        };
      };
    };
  };
  findPostsById_1: {
    parameters: {
      path: {
        postId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Post"];
        };
      };
    };
  };
}
